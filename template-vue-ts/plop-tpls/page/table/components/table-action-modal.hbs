<template>
  <n-modal
    v-model:show="modalVisible"
    preset="card"
    :title="title"
    class="w-700px"
  >
    <n-form
      ref="formRef"
      label-placement="left"
      :label-width="120"
      :model="formModel"
      :rules="rules"
    >
      <n-grid :cols="24" :x-gap="18">
        <n-form-item-gi :span="24" label="加油站名称" path="name">
          <n-input v-model:value="formModel.name" placeholder="加油站名称" />
        </n-form-item-gi>
        <n-form-item-gi :span="24" label="状态" path="state">
          <n-radio-group v-model:value="formModel.state" name="state">
            <n-space>
              <n-radio :value="1">
                营业中
              </n-radio>
              <n-radio :value="0">
                暂停营业
              </n-radio>
            </n-space>
          </n-radio-group>
        </n-form-item-gi>
      </n-grid>
      <n-space class="w-full pt-16px" :size="24" justify="end">
        <n-button class="w-72px" @click="closeModal">取消</n-button>
        <n-button
          class="w-72px"
          type="primary"
          @click="handleSubmit"
        >确定</n-button>
      </n-space>
    </n-form>
  </n-modal>
</template>

<script setup lang="ts">
  import { ref, computed, reactive, watch } from 'vue' import { useCommonStore }
  from '../../../../src/store' import { useStationStore } from '../store' import
  type { FormInst, FormItemRule, SelectOption } from 'naive-ui' import type {
  GasStationFormModel } from '../types' import type { AreaCodeItem } from
  '../../../../src/services/common/types' export interface Props { /**
  弹窗可见性 */ visible: boolean /** * 弹窗类型 * add: 新增 * edit: 修改 */
  type?: 'add' | 'edit', /** 编辑的表格行数据 */ editData?: any | null; } export
  type ModalType = NonNullable<Props['type']> defineOptions({ name:
  'StationTableActionModel'}) const props = withDefaults(defineProps<Props>(), {
  type: 'add', editData: null }) interface Emits { (e: 'update:visible',
  visible: boolean): void } const emit = defineEmits<Emits>(); const
  modalVisible = computed({ get() { return props.visible }, set(visible) {
  emit('update:visible', visible) } }) const closeModal = () => {
  modalVisible.value = false; } const title = computed(() => { const titles:
  Record<ModalType, string> = { add: '添加', edit: '修改' } return
  titles[props.type] }) const formRef = ref<HTMLElement & FormInst>(); function
  createDefaultFormModel(): GasStationFormModel { return { name: '', state:
  null, } } const formModel =
  reactive<GasStationFormModel>(createDefaultFormModel()) function
  validatorNumberValueType(rule: FormItemRule, value: number): boolean { return
  value === null || undefined ? false : true } const rules: Record<keyof
  GasStationFormModel, FormItemRule | FormItemRule[]> = { name: { required:
  true, message: '请填写加油站名称', trigger: 'blur' }, state: { required: true,
  validator: validatorNumberValueType, message: "请选择状态", trigger: ['blur',
  'change'] }, } const commonStore = useCommonStore() const store =
  useStationStore() const message = useMessage() const gasStationTypeOptions =
  computed(() => { return commonStore.gasStationTypeList }) function init() { if
  (gasStationTypeOptions.value.length <= 0) {
  commonStore.getGasStationTypeList() } } init() function
  handleUpdateFormModel(model: Partial<GasStationFormModel>) {
  Object.assign(formModel, model) } function handleUpdateFormModelByModalType()
  { const handlers: Record<ModalType, () => void> = { add: () => { const
  defaultFormModel = createDefaultFormModel();
  handleUpdateFormModel(defaultFormModel) }, edit: () => { if (props.editData) {
  const formData= props.editData; handleUpdateFormModel({ ...formData, }) } } }
  handlers[props.type](); } function handleSubmit() {
  formRef.value?.validate(async (errors) => { if (!errors) { await
  store.saveFormData(formModel.value) await closeModal(); } else {
  console.log(errors) message.error('验证失败') } }) } watch( () =>
  props.visible, newValue => { if (newValue) {
  handleUpdateFormModelByModalType() } } )
</script>